services:

  kafka:
    image: apache/kafka-native:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - kafka_data:/var/lib/kafka
    environment:
      KAFKA_NODE_ID: 0
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      CLUSTER_ID: 5L6g3nShT-eMCtK--X86sw
    extends:
      file: common-config.yml
      service: network-deploy-service

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    ports:
      - "7080:8080"
    environment:
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
    command: "start-dev"
    extends:
      file: common-config.yml
      service: network-deploy-service

  read:
   image: grafana/loki:latest
   container_name: grafana-read
   command: "-config.file=/etc/loki/config.yaml -target=read"
   ports:
     - "3101:3100"
     - "7946"
     - "9095"
   volumes:
     - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
   depends_on:
     - minio
   healthcheck:
     test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
     interval: 10s
     timeout: 5s
     retries: 5
   networks: &loki-dns
     eazybank:
       aliases:
         - loki

  write:
   image: grafana/loki:latest
   container_name: grafana-write
   command: "-config.file=/etc/loki/config.yaml -target=write"
   ports:
     - "3102:3100"
     - "7946"
     - "9095"
   volumes:
     - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
   healthcheck:
     test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
     interval: 10s
     timeout: 5s
     retries: 5
   depends_on:
     - minio
   networks:
     <<: *loki-dns

  alloy:
   image: grafana/alloy:latest
   container_name: grafana-alloy
   volumes:
     - ../observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
     - /var/run/docker.sock:/var/run/docker.sock
   command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
   ports:
     - "12345:12345"
   depends_on:
     - gateway
   extends:
     file: common-config.yml
     service: network-deploy-service

  minio:
   image: minio/minio
   container_name: grafana-minio
   entrypoint:
     - sh
     - -euc
     - |
       mkdir -p /data/loki-data && \
       mkdir -p /data/loki-ruler && \
       minio server /data
   environment:
     - MINIO_ROOT_USER=loki
     - MINIO_ROOT_PASSWORD=supersecret
     - MINIO_PROMETHEUS_AUTH_TYPE=public
     - MINIO_UPDATE=off
   ports:
     - 9000
   volumes:
     - ./.data/minio:/data
   healthcheck:
     test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
     interval: 15s
     timeout: 20s
     retries: 5
   extends:
     file: common-config.yml
     service: network-deploy-service

  prometheus:
   image: prom/prometheus:latest
   container_name: prometheus
   ports:
     - "9090:9090"
   volumes:
     - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
   extends:
     file: common-config.yml
     service: network-deploy-service

  tempo:
   image: grafana/tempo:latest
   container_name: grafana-tempo
   command: -config.file /etc/tempo-config.yml
   ports:
     - "3110:3100"
     - "4318:4318"
   volumes:
     - ../observability/tempo/tempo.yml:/etc/tempo-config.yml
   extends:
     file: common-config.yml
     service: network-deploy-service

  grafana:
   image: grafana/grafana:latest
   container_name: grafana
   environment:
     - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
     - GF_AUTH_ANONYMOUS_ENABLED=true
     - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
   depends_on:
     - gateway
   entrypoint:
     - sh
     - -euc
     - |
       /run.sh
   ports:
     - "3000:3000"
   volumes:
     - ../observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
   healthcheck:
     test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
     interval: 10s
     timeout: 5s
     retries: 5
   extends:
     file: common-config.yml
     service: network-deploy-service

  backend:
   image: grafana/loki:latest
   container_name: grafana-backend
   volumes:
     - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
   ports:
     - "3100"
     - "7946"
   command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
   depends_on:
     - gateway
   extends:
     file: common-config.yml
     service: network-deploy-service

  gateway:
   image: nginx:latest
   container_name: grafana-gateway
   depends_on:
     - read
     - write
   entrypoint:
     - sh
     - -euc
     - |
       cat <<EOF > /etc/nginx/nginx.conf
       user  nginx;
       worker_processes  5;  ## Default: 1
  
       events {
         worker_connections   1000;
       }
  
       http {
         resolver 127.0.0.11;
  
         server {
           listen             3100;
  
           location = / {
             return 200 'OK';
             auth_basic off;
           }
  
           location = /api/prom/push {
             proxy_pass       http://write:3100\$$request_uri;
           }
  
           location = /api/prom/tail {
             proxy_pass       http://read:3100\$$request_uri;
             proxy_set_header Upgrade \$$http_upgrade;
             proxy_set_header Connection "upgrade";
           }
  
           location ~ /api/prom/.* {
             proxy_pass       http://read:3100\$$request_uri;
           }
  
           location = /loki/api/v1/push {
             proxy_pass       http://write:3100\$$request_uri;
           }
  
           location = /loki/api/v1/tail {
             proxy_pass       http://read:3100\$$request_uri;
             proxy_set_header Upgrade \$$http_upgrade;
             proxy_set_header Connection "upgrade";
           }
  
           location ~ /loki/api/.* {
             proxy_pass       http://read:3100\$$request_uri;
           }
         }
       }
       EOF
       /docker-entrypoint.sh nginx -g "daemon off;"
   ports:
     - "3100:3100"
   healthcheck:
     test: [ "CMD", "service", "nginx", "status" ]
     interval: 10s
     timeout: 5s
     retries: 5
   extends:
     file: common-config.yml
     service: network-deploy-service

  configserver:
    image: "pushnofear/configserver:s14"
    container_name: configserver-ms
    ports:
      - "8071:8071"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8071/actuator/health/readiness"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      OTEL_SERVICE_NAME: "configserver"
    extends:
      file: common-config.yml
      service: microservice-base-config

  eurekaserver:
    image: "pushnofear/eurekaserver:s14"
    container_name: eurekaserver-ms
    ports:
      - "8070:8070"
    volumes:
      - "../dockerize:/usr/local/bin/dockerize:ro"
    entrypoint:
      - /usr/local/bin/dockerize
      - -wait
      - http://configserver:8071/actuator/health/readiness
      - -timeout
      - 60s
      - /cnb/process/web
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver"
      OTEL_SERVICE_NAME: "eurekaserver"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8070/actuator/health/readiness"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-configserver-config

  accounts:
    image: "pushnofear/accounts:s14"
    container_name: accounts-ms
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health/readiness"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    volumes:
      - "../dockerize:/usr/local/bin/dockerize:ro"
    entrypoint:
      - /usr/local/bin/dockerize
      - -wait
      - http://eurekaserver:8070/actuator/health/readiness
      - -wait
      - tcp://kafka:9092
      - -timeout
      - 120s
      - /cnb/process/web
    environment:
      SPRING_APPLICATION_NAME: "accounts"
      OTEL_SERVICE_NAME: "accounts"
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: "kafka:9092"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  loans:
   image: "pushnofear/loans:s14"
   container_name: loans-ms
   healthcheck:
     test: ["CMD", "curl", "-f", "http://localhost:8090/actuator/health/readiness"]
     interval: 10s
     timeout: 5s
     retries: 10
     start_period: 10s
   volumes:
     - "../dockerize:/usr/local/bin/dockerize:ro"
   entrypoint:
     - /usr/local/bin/dockerize
     - -wait
     - http://configserver:8071/actuator/health/readiness
     - -wait
     - http://eurekaserver:8070/actuator/health/readiness
     - -timeout
     - 120s
     - /cnb/process/web
   environment:
     SPRING_APPLICATION_NAME: "loans"
     OTEL_SERVICE_NAME: "loans"
     SPRING_RABBITMQ_HOST: "rabbit"
   extends:
     file: common-config.yml
     service: microservice-eureka-config

  cards:
   image: "pushnofear/cards:s14"
   container_name: cards-ms
   healthcheck:
     test: ["CMD", "curl", "-f", "http://localhost:9000/actuator/health/readiness"]
     interval: 10s
     timeout: 5s
     retries: 10
     start_period: 10s
   volumes:
     - "../dockerize:/usr/local/bin/dockerize:ro"
   entrypoint:
     - /usr/local/bin/dockerize
     - -wait
     - http://configserver:8071/actuator/health/readiness
     - -wait
     - http://eurekaserver:8070/actuator/health/readiness
     - -timeout
     - 120s
     - /cnb/process/web
   environment:
     SPRING_APPLICATION_NAME: "cards"
     OTEL_SERVICE_NAME: "cards"
   extends:
     file: common-config.yml
     service: microservice-eureka-config

  message:
    image: "pushnofear/message:s14"
    container_name: message-ms
    volumes:
      - "../dockerize:/usr/local/bin/dockerize:ro"
    entrypoint:
      - /usr/local/bin/dockerize
      - -wait
      - http://configserver:8071/actuator/health/readiness
      - -wait
      - http://eurekaserver:8070/actuator/health/readiness
      - -timeout
      - 120s
      - /cnb/process/web
    environment:
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: "kafka:9092"
    extends:
      file: common-config.yml
      service: network-deploy-service

  gatewayserver:
    image: "pushnofear/gatewayserver:s14"
    container_name: gatewayserver-ms
    ports:
      - "8072:8072"
    volumes:
      - "../dockerize:/usr/local/bin/dockerize:ro"
    entrypoint:
      - /usr/local/bin/dockerize
      - -wait
      - http://accounts:8080/actuator/health/readiness
      - -wait
      - http://loans:8090/actuator/health/readiness
      - -wait
      - http://cards:9000/actuator/health/readiness
      - -timeout
      - 240s
      - /cnb/process/web
    environment:
      SPRING_APPLICATION_NAME: "gatewayserver"
      OTEL_SERVICE_NAME: "gatewayserver"
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: "http://keycloak:8080/realms/master/protocol/openid-connect/certs"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

volumes:
  kafka_data:
    driver: local

networks:
  eazybank:
    driver: "bridge"
